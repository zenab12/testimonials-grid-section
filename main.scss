@import url('https://fonts.googleapis.com/css2?family=Barlow+Semi+Condensed:wght@500;600&family=Fraunces:opsz,wght@9..144,700&display=swap');
//Variables
$Moderate-violet: hsl(263, 55%, 52%);
$Very-dark-grayish-blue: hsl(217, 19%, 35%);
$Very-dark-blackish-blue: hsl(219, 29%, 14%);
$White: hsl(0, 0%, 100%);
$Light-gray: hsl(0, 0%, 81%);
$Light-grayish-blue: hsl(210, 46%, 95%);
$Font-face:13px;
$Font-family:'Barlow Semi Condensed', sans-serif;
$mobile:'max-width:767px';


@mixin Normalize {
box-sizing: border-box;
margin: 0px;
padding: 0px;
font-family: $Font-family;
}
@mixin Grid($r:center,$c:center,$gap:20px) {
    display: grid;
    align-items: $c;
    justify-content: $r;
    gap:$gap;
}
@mixin SetFont($index) {
    @if $index == 1{position: absolute;top:0;left:0;color: transparent}
    @else if ($index == 2 or $index == 3 or $index == 0){font-size: 13px}
    @else{font-size: 18px;}
    }

@function Generate-Area($index:0)
{
    $grid-area:one;
    @if($index == 1)
    {
        $grid-area:one;
    }
    @else if($index == 2)
    {
        $grid-area:two;
    }
    @else if($index == 3)
    {
        $grid-area:three;
    }
    @else if($index == 4)
    {
        $grid-area:four;
    }
    @else if($index == 5)
    {
        $grid-area:five;
    }@else {@error "number: #{$index} is not valid, Num Must be between 1 - 5"};
    
    @return $grid-area;
}


*{@include Normalize()}
body{
@include Grid();
height: 100vh;
background-color: $Light-grayish-blue;
}

%font-color
{
    color: $Light-gray;
}
h1{@include SetFont(1)}
h2{@include SetFont(2);@extend %font-color}
h3{@include SetFont(3);@extend %font-color;opacity: 50%}
div{@include SetFont(-1);color: $White}
blockquote{@include SetFont(0);@extend %font-color;opacity: 70%}


%grid
{
    @include Grid(space-between,flex-start,10px );
    padding: 32px;
    border-radius: 7px;
    position: relative;
}


main.container
{
@include Grid(space-between,normal);
max-width:1000px;
grid-template-columns:repeat(4,1fr);
grid-template-rows: repeat(2,auto);
grid-template-areas: 'one one two five'
                    'three four four five';
@for $i from 1 through 5
{
    &{> .grid:nth-of-type(#{$i}){@extend %grid;grid-area:Generate-Area($i);};.grid:nth-of-type(1) .grid__body::before{content: url(./images/bg-pattern-quotation.svg);background-size: cover;display: block;z-index:-1;position: absolute;top:-70px;left:50%;}
    }

}
.grid:nth-of-type(1) .grid__body{position: relative;z-index: 2;}
$backgrounds: (1:$Moderate-violet,2:$Very-dark-grayish-blue,3:$White,4:$Very-dark-blackish-blue,5:$White);
@each $index,$color in $backgrounds{.grid:nth-of-type(#{$index}){background-color: $color;}}
}

%dark-mode
{
    &{
    div{color: $Very-dark-blackish-blue}}
    h2{color:$Very-dark-blackish-blue}
    h3{opacity: 100;}
    blockquote{opacity: 100;}
}

.grid:nth-of-type(5){@extend %dark-mode;}
.grid:nth-of-type(3){@extend %dark-mode;}


.grid .grid__header
{
    @include Grid(flex-start,center,10px);
    grid-template-columns: repeat(2,auto);
}


.grid .grid__header img
{
    width:30px;
    height: 30px;
    border-radius: 50%;
    outline:2px solid $White;
}

@media($mobile)
{
    main.container{  @include Grid();grid-template-columns: 350px;grid-template-areas:'one' 'two' 'three' 'four' 'five';};
}
